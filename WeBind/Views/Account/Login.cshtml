@using WeBind.Models
@model LoginViewModel

@{
    Layout = null;
    ViewBag.Title = "Log in";
    @Model.RoleId
}
<html class="transition-navbar-scroll top-navbar-xlarge bottom-footer" lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>WeBind</title>
    <!-- Vendor CSS BUNDLE
      Includes styling for all of the 3rd party libraries used with this module, such as Bootstrap, Font Awesome and others.
      TIP: Using bundles will improve performance by reducing the number of network requests the client needs to make when loading the page. -->
    <link href="~/Content/vendor/all.css" rel="stylesheet" />
    <!-- Vendor CSS Standalone Libraries
          NOTE: Some of these may have been customized (for example, Bootstrap).
          See: src/less/themes/{theme_name}/vendor/ directory -->
    <!-- <link href="~/Content/vendor/bootstrap.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/font-awesome.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/picto.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/material-design-iconic-font.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/datepicker3.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/jquery.minicolors.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/railscasts.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/owl.carousel.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/slick.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/daterangepicker-bs3.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/jquery.bootstrap-touchspin.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/select2.css" rel="stylesheet"> -->
    <!-- <link href="~/Content/vendor/jquery.countdown.css" rel="stylesheet"> -->
    <!-- APP CSS BUNDLE [css/app/app.css]
    INCLUDES:
        - The APP CSS CORE styling required by the "html" module, also available with main.css - see below;
        - The APP CSS STANDALONE modules required by the "html" module;
    NOTE:
        - This bundle may NOT include ALL of the available APP CSS STANDALONE modules;
          It was optimised to load only what is actually used by the "html" module;
          Other APP CSS STANDALONE modules may be available in addition to what's included with this bundle.
          See src/less/themes/html/app.less
    TIP:
        - Using bundles will improve performance by greatly reducing the number of network requests the client needs to make when loading the page. -->
    <link href="~/Content/app/app.css" rel="stylesheet" />
    <!-- App CSS CORE
    This variant is to be used when loading the separate styling modules -->
    <!-- <link href="~/Content/app/main.css" rel="stylesheet"> -->
    <!-- App CSS Standalone Modules
      As a convenience, we provide the entire UI framework broke down in separate modules
      Some of the standalone modules may have not been used with the current theme/module
      but ALL modules are 100% compatible -->
    <!-- <link href="~/Content/app/essentials.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/material.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/layout.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/sidebar.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/sidebar-skins.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/navbar.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/messages.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/media.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/charts.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/maps.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/colors-alerts.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/colors-background.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/colors-buttons.css" rel="stylesheet" /> -->
    <!-- <link href="~/Content/app/colors-text.css" rel="stylesheet" /> -->
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries
    WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!-- If you don't need support for Internet Explorer <= 8 you can safely remove these -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>

<body class="login">
    <script src="~/Scripts/gen_validatorv4.js"></script>
    <div class="container">
        <div class="page-section" style="padding-top:450px">
            <a href="@Url.Action("Index", "Home")"><i class="fa fa-4x fa-arrow-circle-left"></i></a>
        </div>
    </div>
    <div id="content">
        <fieldset class="step relative paper-shadow" style="margin-top:30px" data-z="2">
            <div class="container-fluid">
                <div class="tabbable tabs-blocks tabs-center-h tabs-primary">
                    <!-- Tabs -->
                    <ul class="nav nav-tabs">
                        <li class="col-lg-4 margin-none @(Model.RoleId == null || Model.RoleId.Equals(((int)WeBind.Models.Roles.Educator).ToString()) ? "active" : "")"><a href="#educator-login" data-toggle="tab"><i class="fa fa-university"></i> Sign in as College</a></li>
                        <li class="col-lg-4 margin-none @(Model.RoleId != null && Model.RoleId.Equals(((int)WeBind.Models.Roles.Expert).ToString()) ? "active" : "")"><a href="#expert-login" data-toggle="tab"><i class="fa fa-user"></i> Sign in as Master</a></li>
                        <li class="col-lg-4 margin-none @(Model.RoleId != null && Model.RoleId.Equals(((int)WeBind.Models.Roles.Student).ToString()) ? "active" : "")"><a href="#student-login" data-toggle="tab"><i class="fa fa-mortar-board"></i> Sign in as Student</a></li>
                    </ul>
                    <!-- // END Tabs -->
                    <!-- Panes -->
                    <div class="tab-content">
                        <div id="educator-login" class="tab-pane @(Model.RoleId == null || Model.RoleId.Equals(((int)WeBind.Models.Roles.Educator).ToString()) ? "active" : "")">
                            <div class="text-center paper-shadow" data-z="0.5">
                                <h1 class="text-display-1 text-center margin-bottom-none">Hello! College</h1><br />
                                @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl, RoleID = (int)WeBind.Models.Roles.Educator }, FormMethod.Post, new { @name = "educatorLoginForm", @class = "form-horizontal", role = "form" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @*@Html.Hidden("RoleId", "2")*@
                                    if (ViewData.ModelState["invalidLogin"] != null && ViewData.ModelState["invalidLogin"].Errors.Count > 0)
                                    {
                                        <div class="text-danger">Invalid Username or password</div>
                                    }
                                    else
                                    {
                                        @Html.ValidationSummary("", new { @class = "text-danger" })
                                    }

                                    <div class="panel-body" style="padding-bottom:0">
                                        <div class="form-group">
                                            <div class="form-control-material">
                                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control  text-center", @placeholder = "Enter Email Address", id = "educatorEmail" })
                                                <label for="educatorEmail">Email Address</label>
                                            </div>
                                            <div id="educatorLoginForm_Email_errorloc" class="text-danger"></div>
                                        </div>
                                        <div class="form-group">
                                            <div class="form-control-material">
                                                @Html.PasswordFor(m => m.Password, new { @class = "form-control  text-center", @placeholder = "Enter Password", id = "educatorPassword" })
                                                <label for="educatorPassword">Password</label>
                                            </div>
                                            <div id="educatorLoginForm_Password_errorloc" class="text-danger"></div>
                                        </div>
                                        @*<div class="checkbox checkbox-primary">
                                                @Html.CheckBoxFor(m => m.RememberMe)
                                                @Html.LabelFor(m => m.RememberMe)
                                            </div><br />*@
                                        <button type="submit" class="btn btn-primary">Login <i class="fa fa-fw fa-unlock-alt"></i></button><br /><br />
                                        @Html.ActionLink("Forgot password?", "ForgotPassword", null, htmlAttributes: new { @class = "forgot-password" })<br /><br />

                                        @Html.ActionLink("Create account", "Register", "Account", routeValues: new { RoleName = "Educator" }, htmlAttributes: new { id = "signupLink", @class = "link-text-color" })
                                    </div>
                                }
                            </div>
                        </div>
                        <div id="expert-login" class="tab-pane @(Model.RoleId != null && Model.RoleId.Equals(((int)WeBind.Models.Roles.Expert).ToString()) ? "active" : "")">
                            <div class="text-center paper-shadow" data-z="0.5">
                                <h1 class="text-display-1 text-center margin-bottom-none">Hello! Master</h1><br />
                                @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl, RoleID = (int)WeBind.Models.Roles.Expert }, FormMethod.Post, new { @name = "expertLoginForm", @class = "form-horizontal", role = "form" }))
                                {
                                    @Html.AntiForgeryToken()

                                    if (ViewData.ModelState["invalidLogin"] != null && ViewData.ModelState["invalidLogin"].Errors.Count > 0)
                                    {
                                        <div class="text-danger">Invalid Username or password</div>
                                    }
                                    else
                                    {
                                        @Html.ValidationSummary("", new { @class = "text-danger" })
                                    }

                                    <div class="panel-body" style="padding-bottom:0">
                                        <div class="form-group">
                                            <div class="form-control-material">
                                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control  text-center", @placeholder = "Enter Email Address", id = "expertEmailusername" })
                                                <label for="username">Email Address</label>
                                            </div>
                                            <div id="expertLoginForm_Email_errorloc" class="text-danger"></div>
                                        </div>
                                        <div class="form-group">
                                            <div class="form-control-material">
                                                @Html.PasswordFor(m => m.Password, new { @class = "form-control  text-center", @placeholder = "Enter Password", id = "expertPassword" })
                                                <label for="password">Password</label>
                                            </div>
                                            <div id="expertLoginForm_Password_errorloc" class="text-danger"></div>
                                        </div>
                                        @*<div class="checkbox checkbox-primary">
                                                @Html.CheckBoxFor(m => m.RememberMe)
                                                @Html.LabelFor(m => m.RememberMe)
                                            </div><br />*@
                                        <button type="submit" class="btn btn-primary">Login <i class="fa fa-fw fa-unlock-alt"></i></button><br /><br />
                                        @Html.ActionLink("Forgot password?", "ForgotPassword", null, htmlAttributes: new { @class = "forgot-password" })<br /><br />
                                        @Html.ActionLink("Create account", "Register", "Account", routeValues: null, htmlAttributes: new { id = "signupLink", @class = "link-text-color" })
                                    </div>
                                }
                            </div>
                        </div>
                        <div id="student-login" class="tab-pane @(Model.RoleId != null && Model.RoleId.Equals(((int)WeBind.Models.Roles.Student).ToString()) ? "active" : "")">
                            <div class="text-center paper-shadow" data-z="0.5">
                                <h1 class="text-display-1 text-center margin-bottom-none">Hello! Student</h1><br />
                                @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl, RoleID = (int)WeBind.Models.Roles.Student }, FormMethod.Post, new { @name = "studentLoginForm", @class = "form-horizontal", role = "form" }))
                                {
                                    @Html.AntiForgeryToken()

                                    if (ViewData.ModelState["invalidLogin"] != null && ViewData.ModelState["invalidLogin"].Errors.Count > 0)
                                    {
                                        <div class="text-danger">Invalid Username or password</div>
                                    }
                                    else
                                    {
                                        @Html.ValidationSummary("", new { @class = "text-danger" })
                                    }

                                    <div class="panel-body" style="padding-bottom:0">
                                        <div class="form-group">
                                            <div class="form-control-material">
                                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control  text-center", @placeholder = "Enter Email Address", id = "studentEmailusername" })
                                                <label for="username">Email Address</label>
                                            </div>
                                            <div id="studentLoginForm_Email_errorloc" class="text-danger"></div>
                                        </div>
                                        <div class="form-group">
                                            <div class="form-control-material">
                                                @Html.PasswordFor(m => m.Password, new { @class = "form-control  text-center", @placeholder = "Enter Password", id = "studentPassword" })
                                                <label for="password">Password</label>
                                            </div>
                                            <div id="studentLoginForm_Password_errorloc" class="text-danger"></div>
                                        </div>
                                        @*<div class="checkbox checkbox-primary">
                                                @Html.CheckBoxFor(m => m.RememberMe)
                                                @Html.LabelFor(m => m.RememberMe)
                                            </div><br />*@
                                        <button type="submit" class="btn btn-primary">Login <i class="fa fa-fw fa-unlock-alt"></i></button><br /><br />
                                        @Html.ActionLink("Forgot password?", "ForgotPassword", null, htmlAttributes: new { @class = "forgot-password" })<br /><br />
                                        @*<a href="#" class="forgot-password">Forgot password?</a>*@
                                        @*<a href="sign-up.html" class="link-text-color">Create account</a>*@
                                        @Html.ActionLink("Create account", "Register", "Account", routeValues: null, htmlAttributes: new { id = "signupLink", @class = "link-text-color" })
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <!-- // END Panes -->
                </div>
            </div>
        </fieldset>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <strong>WeBind</strong> &copy; Copyright 2015
    </footer>
    <!-- // Footer -->
    <!-- Inline Script for colors and config objects; used by various external scripts; -->
    <script>
        var colors = {
            "danger-color": "#e74c3c",
            "success-color": "#81b53e",
            "warning-color": "#f0ad4e",
            "inverse-color": "#2c3e50",
            "info-color": "#2d7cb5",
            "default-color": "#6e7882",
            "default-light-color": "#cfd9db",
            "purple-color": "#9D8AC7",
            "mustard-color": "#d4d171",
            "lightred-color": "#e15258",
            "body-bg": "#f6f6f6"
        };
        var config = {
            theme: "html",
            skins: {
                "default": {
                    "primary-color": "#42a5f5"
                }
            }
        };
    </script>

    <script language="JavaScript" type="text/javascript"
            xml:space="preserve">
        //<![CDATA[
        //You should create the validator only after the definition of the HTML form
        var frmvalidator = new Validator("expertLoginForm");
        frmvalidator.EnableOnPageErrorDisplay();
        frmvalidator.EnableMsgsTogether();

        frmvalidator.addValidation("Email", "req", "Please enter your EmailId");
        frmvalidator.addValidation("Password", "req", "Please enter your Password");

        frmvalidator.addValidation("Email", "email", "Please enter valid EmailID");


        var eduLoginvalidator = new Validator("educatorLoginForm");
        eduLoginvalidator.EnableOnPageErrorDisplay();
        eduLoginvalidator.EnableMsgsTogether();

        eduLoginvalidator.addValidation("Email", "req", "Please enter your EmailId");
        eduLoginvalidator.addValidation("Password", "req", "Please enter your Password");

        eduLoginvalidator.addValidation("Email", "email", "Please enter valid EmailID");


        var stuLoginvalidator = new Validator("studentLoginForm");
        stuLoginvalidator.EnableOnPageErrorDisplay();
        stuLoginvalidator.EnableMsgsTogether();

        stuLoginvalidator.addValidation("Email", "req", "Please enter your EmailId");
        stuLoginvalidator.addValidation("Password", "req", "Please enter your Password");

        stuLoginvalidator.addValidation("Email", "email", "Please enter valid EmailID");

        //]]></script>

    <script src="~/Scripts/vendor/all.js"></script>
    <script src="~/Scripts/app/app.js"></script>

</body>
</html>